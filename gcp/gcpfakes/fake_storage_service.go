// This file was generated by counterfeiter
package gcpfakes

import (
	"sync"

	"google.golang.org/api/storage/v1"

	"github.com/challiwill/meteorologica/gcp"
)

type FakeStorageService struct {
	BucketsStub        func(string) (*storage.Buckets, error)
	bucketsMutex       sync.RWMutex
	bucketsArgsForCall []struct {
		arg1 string
	}
	bucketsReturns struct {
		result1 *storage.Buckets
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeStorageService) Buckets(arg1 string) (*storage.Buckets, error) {
	fake.bucketsMutex.Lock()
	fake.bucketsArgsForCall = append(fake.bucketsArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("Buckets", []interface{}{arg1})
	fake.bucketsMutex.Unlock()
	if fake.BucketsStub != nil {
		return fake.BucketsStub(arg1)
	} else {
		return fake.bucketsReturns.result1, fake.bucketsReturns.result2
	}
}

func (fake *FakeStorageService) BucketsCallCount() int {
	fake.bucketsMutex.RLock()
	defer fake.bucketsMutex.RUnlock()
	return len(fake.bucketsArgsForCall)
}

func (fake *FakeStorageService) BucketsArgsForCall(i int) string {
	fake.bucketsMutex.RLock()
	defer fake.bucketsMutex.RUnlock()
	return fake.bucketsArgsForCall[i].arg1
}

func (fake *FakeStorageService) BucketsReturns(result1 *storage.Buckets, result2 error) {
	fake.BucketsStub = nil
	fake.bucketsReturns = struct {
		result1 *storage.Buckets
		result2 error
	}{result1, result2}
}

func (fake *FakeStorageService) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.bucketsMutex.RLock()
	defer fake.bucketsMutex.RUnlock()
	return fake.invocations
}

func (fake *FakeStorageService) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ gcp.StorageService = new(FakeStorageService)
