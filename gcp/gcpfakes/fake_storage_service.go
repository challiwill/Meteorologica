// This file was generated by counterfeiter
package gcpfakes

import (
	"net/http"
	"sync"

	"github.com/challiwill/meteorologica/gcp"
)

type FakeStorageService struct {
	DailyUsageStub        func(string, string) (*http.Response, error)
	dailyUsageMutex       sync.RWMutex
	dailyUsageArgsForCall []struct {
		arg1 string
		arg2 string
	}
	dailyUsageReturns struct {
		result1 *http.Response
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeStorageService) DailyUsage(arg1 string, arg2 string) (*http.Response, error) {
	fake.dailyUsageMutex.Lock()
	fake.dailyUsageArgsForCall = append(fake.dailyUsageArgsForCall, struct {
		arg1 string
		arg2 string
	}{arg1, arg2})
	fake.recordInvocation("DailyUsage", []interface{}{arg1, arg2})
	fake.dailyUsageMutex.Unlock()
	if fake.DailyUsageStub != nil {
		return fake.DailyUsageStub(arg1, arg2)
	} else {
		return fake.dailyUsageReturns.result1, fake.dailyUsageReturns.result2
	}
}

func (fake *FakeStorageService) DailyUsageCallCount() int {
	fake.dailyUsageMutex.RLock()
	defer fake.dailyUsageMutex.RUnlock()
	return len(fake.dailyUsageArgsForCall)
}

func (fake *FakeStorageService) DailyUsageArgsForCall(i int) (string, string) {
	fake.dailyUsageMutex.RLock()
	defer fake.dailyUsageMutex.RUnlock()
	return fake.dailyUsageArgsForCall[i].arg1, fake.dailyUsageArgsForCall[i].arg2
}

func (fake *FakeStorageService) DailyUsageReturns(result1 *http.Response, result2 error) {
	fake.DailyUsageStub = nil
	fake.dailyUsageReturns = struct {
		result1 *http.Response
		result2 error
	}{result1, result2}
}

func (fake *FakeStorageService) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.dailyUsageMutex.RLock()
	defer fake.dailyUsageMutex.RUnlock()
	return fake.invocations
}

func (fake *FakeStorageService) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ gcp.StorageService = new(FakeStorageService)
