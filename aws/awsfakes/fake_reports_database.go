// This file was generated by counterfeiter
package awsfakes

import (
	"sync"

	"github.com/challiwill/meteorologica/aws"
	"github.com/challiwill/meteorologica/datamodels"
)

type FakeReportsDatabase struct {
	GetUsageMonthToDateStub        func(datamodels.ReportIdentifier) (datamodels.UsageMonthToDate, error)
	getUsageMonthToDateMutex       sync.RWMutex
	getUsageMonthToDateArgsForCall []struct {
		arg1 datamodels.ReportIdentifier
	}
	getUsageMonthToDateReturns struct {
		result1 datamodels.UsageMonthToDate
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeReportsDatabase) GetUsageMonthToDate(arg1 datamodels.ReportIdentifier) (datamodels.UsageMonthToDate, error) {
	fake.getUsageMonthToDateMutex.Lock()
	fake.getUsageMonthToDateArgsForCall = append(fake.getUsageMonthToDateArgsForCall, struct {
		arg1 datamodels.ReportIdentifier
	}{arg1})
	fake.recordInvocation("GetUsageMonthToDate", []interface{}{arg1})
	fake.getUsageMonthToDateMutex.Unlock()
	if fake.GetUsageMonthToDateStub != nil {
		return fake.GetUsageMonthToDateStub(arg1)
	} else {
		return fake.getUsageMonthToDateReturns.result1, fake.getUsageMonthToDateReturns.result2
	}
}

func (fake *FakeReportsDatabase) GetUsageMonthToDateCallCount() int {
	fake.getUsageMonthToDateMutex.RLock()
	defer fake.getUsageMonthToDateMutex.RUnlock()
	return len(fake.getUsageMonthToDateArgsForCall)
}

func (fake *FakeReportsDatabase) GetUsageMonthToDateArgsForCall(i int) datamodels.ReportIdentifier {
	fake.getUsageMonthToDateMutex.RLock()
	defer fake.getUsageMonthToDateMutex.RUnlock()
	return fake.getUsageMonthToDateArgsForCall[i].arg1
}

func (fake *FakeReportsDatabase) GetUsageMonthToDateReturns(result1 datamodels.UsageMonthToDate, result2 error) {
	fake.GetUsageMonthToDateStub = nil
	fake.getUsageMonthToDateReturns = struct {
		result1 datamodels.UsageMonthToDate
		result2 error
	}{result1, result2}
}

func (fake *FakeReportsDatabase) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.getUsageMonthToDateMutex.RLock()
	defer fake.getUsageMonthToDateMutex.RUnlock()
	return fake.invocations
}

func (fake *FakeReportsDatabase) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ aws.ReportsDatabase = new(FakeReportsDatabase)
