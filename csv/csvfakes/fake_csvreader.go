// This file was generated by counterfeiter
package csvfakes

import (
	"sync"

	"github.com/gocarina/gocsv"
)

type FakeCSVReader struct {
	ReadStub        func() ([]string, error)
	readMutex       sync.RWMutex
	readArgsForCall []struct{}
	readReturns     struct {
		result1 []string
		result2 error
	}
	ReadAllStub        func() ([][]string, error)
	readAllMutex       sync.RWMutex
	readAllArgsForCall []struct{}
	readAllReturns     struct {
		result1 [][]string
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeCSVReader) Read() ([]string, error) {
	fake.readMutex.Lock()
	fake.readArgsForCall = append(fake.readArgsForCall, struct{}{})
	fake.recordInvocation("Read", []interface{}{})
	fake.readMutex.Unlock()
	if fake.ReadStub != nil {
		return fake.ReadStub()
	} else {
		return fake.readReturns.result1, fake.readReturns.result2
	}
}

func (fake *FakeCSVReader) ReadCallCount() int {
	fake.readMutex.RLock()
	defer fake.readMutex.RUnlock()
	return len(fake.readArgsForCall)
}

func (fake *FakeCSVReader) ReadReturns(result1 []string, result2 error) {
	fake.ReadStub = nil
	fake.readReturns = struct {
		result1 []string
		result2 error
	}{result1, result2}
}

func (fake *FakeCSVReader) ReadAll() ([][]string, error) {
	fake.readAllMutex.Lock()
	fake.readAllArgsForCall = append(fake.readAllArgsForCall, struct{}{})
	fake.recordInvocation("ReadAll", []interface{}{})
	fake.readAllMutex.Unlock()
	if fake.ReadAllStub != nil {
		return fake.ReadAllStub()
	} else {
		return fake.readAllReturns.result1, fake.readAllReturns.result2
	}
}

func (fake *FakeCSVReader) ReadAllCallCount() int {
	fake.readAllMutex.RLock()
	defer fake.readAllMutex.RUnlock()
	return len(fake.readAllArgsForCall)
}

func (fake *FakeCSVReader) ReadAllReturns(result1 [][]string, result2 error) {
	fake.ReadAllStub = nil
	fake.readAllReturns = struct {
		result1 [][]string
		result2 error
	}{result1, result2}
}

func (fake *FakeCSVReader) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.readMutex.RLock()
	defer fake.readMutex.RUnlock()
	fake.readAllMutex.RLock()
	defer fake.readAllMutex.RUnlock()
	return fake.invocations
}

func (fake *FakeCSVReader) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ gocsv.CSVReader = new(FakeCSVReader)
